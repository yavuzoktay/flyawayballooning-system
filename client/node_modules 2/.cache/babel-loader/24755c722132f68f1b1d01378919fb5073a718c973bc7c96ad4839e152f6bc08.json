{"ast":null,"code":"import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews(_ref) {\n  var _views, _views2;\n  let {\n    onChange,\n    onViewChange,\n    openTo,\n    view: inView,\n    views,\n    autoFocus,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  } = _ref;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(\"MUI X: `view=\\\"\".concat(inView, \"\\\"` is not a valid prop.\"), \"It must be an element of `views=[\\\"\".concat(views.join('\", \"'), \"\\\"]`.\"));\n        warnedOnceNotValidView = true;\n      }\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(\"MUI X: `openTo=\\\"\".concat(openTo, \"\\\"` is not a valid prop.\"), \"It must be an element of `views=[\\\"\".concat(views.join('\", \"'), \"\\\"]`.\"));\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = (_views = views[viewIndex - 1]) !== null && _views !== void 0 ? _views : null;\n  const nextView = (_views2 = views[viewIndex + 1]) !== null && _views2 !== void 0 ? _views2 : null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n    onFocusedViewChange === null || onFocusedViewChange === void 0 || onFocusedViewChange(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n    if (newView === view) {\n      return;\n    }\n    setView(newView);\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ?\n    // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but when it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView);\n    // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}","map":{"version":3,"names":["React","useEventCallback","unstable_useControlled","useControlled","warnedOnceNotValidView","useViews","_ref","_views","_views2","onChange","onViewChange","openTo","view","inView","views","autoFocus","focusedView","inFocusedView","onFocusedViewChange","process","env","NODE_ENV","includes","console","warn","concat","join","previousOpenTo","useRef","previousViews","defaultView","setView","name","state","controlled","default","current","defaultFocusedView","setFocusedView","useEffect","some","previousView","viewIndex","indexOf","nextView","handleFocusedViewChange","viewToFocus","hasFocus","prevFocusedView","handleChangeView","newView","goToNextView","setValueAndGoToNextView","value","currentViewSelectionState","selectedView","isSelectionFinishedOnCurrentView","hasMoreViews","length","Boolean","globalSelectionState","nextViewAfterSelected"],"sources":["/Users/yavuzoktay/Documents/FlyAwayBallooning/flyawayballooning-system-backend/client/node_modules/@mui/x-date-pickers/internals/hooks/useViews.js"],"sourcesContent":["import * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nlet warnedOnceNotValidView = false;\nexport function useViews({\n  onChange,\n  onViewChange,\n  openTo,\n  view: inView,\n  views,\n  autoFocus,\n  focusedView: inFocusedView,\n  onFocusedViewChange\n}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnceNotValidView) {\n      if (inView != null && !views.includes(inView)) {\n        console.warn(`MUI X: \\`view=\"${inView}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n      if (inView == null && openTo != null && !views.includes(openTo)) {\n        console.warn(`MUI X: \\`openTo=\"${openTo}\"\\` is not a valid prop.`, `It must be an element of \\`views=[\"${views.join('\", \"')}\"]\\`.`);\n        warnedOnceNotValidView = true;\n      }\n    }\n  }\n  const previousOpenTo = React.useRef(openTo);\n  const previousViews = React.useRef(views);\n  const defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]);\n  const [view, setView] = useControlled({\n    name: 'useViews',\n    state: 'view',\n    controlled: inView,\n    default: defaultView.current\n  });\n  const defaultFocusedView = React.useRef(autoFocus ? view : null);\n  const [focusedView, setFocusedView] = useControlled({\n    name: 'useViews',\n    state: 'focusedView',\n    controlled: inFocusedView,\n    default: defaultFocusedView.current\n  });\n  React.useEffect(() => {\n    // Update the current view when `openTo` or `views` props change\n    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {\n      setView(views.includes(openTo) ? openTo : views[0]);\n      previousViews.current = views;\n      previousOpenTo.current = openTo;\n    }\n  }, [openTo, setView, view, views]);\n  const viewIndex = views.indexOf(view);\n  const previousView = views[viewIndex - 1] ?? null;\n  const nextView = views[viewIndex + 1] ?? null;\n  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {\n    if (hasFocus) {\n      // Focus event\n      setFocusedView(viewToFocus);\n    } else {\n      // Blur event\n      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching\n      );\n    }\n    onFocusedViewChange?.(viewToFocus, hasFocus);\n  });\n  const handleChangeView = useEventCallback(newView => {\n    // always keep the focused view in sync\n    handleFocusedViewChange(newView, true);\n    if (newView === view) {\n      return;\n    }\n    setView(newView);\n    if (onViewChange) {\n      onViewChange(newView);\n    }\n  });\n  const goToNextView = useEventCallback(() => {\n    if (nextView) {\n      handleChangeView(nextView);\n    }\n  });\n  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {\n    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';\n    const hasMoreViews = selectedView ?\n    // handles case like `DateTimePicker`, where a view might return a `finish` selection state\n    // but when it's not the final view given all `views` -> overall selection state should be `partial`.\n    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);\n    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;\n    onChange(value, globalSelectionState, selectedView);\n    // Detects if the selected view is not the active one.\n    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.\n    if (selectedView && selectedView !== view) {\n      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];\n      if (nextViewAfterSelected) {\n        // move to next view after the selected one\n        handleChangeView(nextViewAfterSelected);\n      }\n    } else if (isSelectionFinishedOnCurrentView) {\n      goToNextView();\n    }\n  });\n  return {\n    view,\n    setView: handleChangeView,\n    focusedView,\n    setFocusedView: handleFocusedViewChange,\n    nextView,\n    previousView,\n    // Always return up-to-date default view instead of the initial one (i.e. defaultView.current)\n    defaultView: views.includes(openTo) ? openTo : views[0],\n    goToNextView,\n    setValueAndGoToNextView\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}