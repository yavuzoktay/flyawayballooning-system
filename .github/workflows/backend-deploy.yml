name: Deploy Backend and Client to S3 and EC2

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '.github/workflows/backend-deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          
      - name: Install Dependencies (Backend)
        run: |
          cd server
          npm install
      
      - name: Install Dependencies and Build (Client)
        run: |
          if [ -d "client" ]; then
            echo "Building client application..."
            cd client
            npm ci --prefer-offline --no-audit --no-fund
            echo "Dependencies installed, starting build..."
            GENERATE_SOURCEMAP=false CI=false npm run build
            echo "Client build completed successfully"
            echo "Build directory contents:"
            ls -la build/
            echo "Static JS files:"
            ls -la build/static/js/
            echo "Checking for CreateAvailabilitiesModal in build:"
            grep -r "CreateAvailabilitiesModal" build/ || echo "CreateAvailabilitiesModal not found in build"
          else
            echo "ERROR: client directory not found!"
            ls -la
            exit 1
          fi
      
      - name: Create deployment package (server + client/build)
        run: |
          zip -r backend-deploy.zip server client/build
          echo "Deployment package created:"
          ls -la backend-deploy.zip
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Upload to S3
        run: |
          aws s3 cp backend-deploy.zip s3://flyawayballooning-backend/backend-deploy.zip
      
      - name: Deploy to EC2 instances
        env:
          SSH_HOSTS: ${{ secrets.SSH_HOSTS }}
          SSH_HOST_SINGLE: ${{ secrets.SSH_HOST }}
        run: |
          set -e
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
          chmod 600 deploy_key
          
          # Debug: Check if secrets are available
          echo "SSH_HOSTS: ${SSH_HOSTS:-'NOT_SET'}"
          echo "SSH_HOST_SINGLE: ${SSH_HOST_SINGLE:-'NOT_SET'}"
          
          # Fallbacks when SSH_HOSTS is not provided: use SSH_HOST (single), otherwise default to previous host
          if [ -z "$SSH_HOSTS" ]; then
            if [ -n "$SSH_HOST_SINGLE" ]; then
              SSH_HOSTS="$SSH_HOST_SINGLE"
              echo "INFO: Using SSH_HOST single target: $SSH_HOSTS"
            else
              SSH_HOSTS="34.205.25.8"
              echo "WARNING: SSH_HOSTS and SSH_HOST are empty. Falling back to 34.205.25.8"
            fi
          fi
          
          echo "Final SSH_HOSTS: $SSH_HOSTS"
          
          for HOST in $(echo "$SSH_HOSTS" | tr ',' ' '); do
            echo "Deploying to $HOST ..."
            # Test SSH connection first
            ssh -i deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@$HOST 'echo "SSH connection successful"' || {
              echo "ERROR: SSH connection failed to $HOST"
              exit 1
            }
            ssh -i deploy_key -o StrictHostKeyChecking=no ec2-user@$HOST '
              set -e
              echo "Starting deployment process on $(hostname)..."
              cd ~/flyawayballooning-system-backend
              
              echo "Downloading deployment package from S3..."
              aws s3 cp s3://flyawayballooning-backend/backend-deploy.zip .
              
              echo "Cleaning up old client build..."
              sudo rm -rf client/build
              
              echo "Extracting deployment package..."
              unzip -o backend-deploy.zip -d .
              
              echo "Setting proper ownership and permissions for client build (served by Nginx)..."
              sudo chown -R nginx:nginx client/build
              sudo chmod -R 755 client/build
              
              echo "Setting SELinux context for client/build (if SELinux enabled)..."
              sudo semanage fcontext -a -t httpd_sys_content_t "/home/ec2-user/flyawayballooning-system-backend/client/build(/.*)?" 2>/dev/null || true
              sudo restorecon -Rv /home/ec2-user/flyawayballooning-system-backend/client/build
              
              echo "Installing server dependencies..."
              cd server
              npm install
              
              echo "Installing PM2 globally if not present..."
              if ! command -v pm2 > /dev/null; then 
                sudo npm install -g pm2
              fi
              
              echo "Creating environment file for production..."
              cat > .env << EOF
              # Database Configuration
              DB_HOST=trip-booking-database.c9mqyasow9hg.us-east-1.rds.amazonaws.com
              DB_USER=admin
              DB_PASSWORD=qumton-jeghuz-doKxy3
              DB_NAME=trip_booking
              
              # Stripe Configuration (Test Mode)
              STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
              STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
              
              # Server Configuration
              PORT=3002
              NODE_ENV=production
              EOF
              
              echo "Restarting application with PM2..."
              pm2 delete flyawayballooning-server 2>/dev/null || true
              PORT=3002 pm2 start index.js --name flyawayballooning-server
              pm2 save
              
              echo "Setting up PM2 startup script..."
              sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
              
              echo "Restarting Nginx..."
              sudo systemctl restart nginx
              
              echo "Deployment completed successfully on $(hostname)!"
              echo "Current client/build contents:"
              ls -la /home/ec2-user/flyawayballooning-system-backend/client/build/
            '
          done
